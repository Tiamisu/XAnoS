.. _Fit_Widget:

Fit Widget
==========
This widget provides a data fitting platform which uses `LMFIT <https://lmfit.github.io/lmfit-py/>`_ python library.
Some of the commonly used functions are provided under different categories and the users can develop their own
categories and fitting functions by using an easy to use template within a Function_Editor_

.. figure:: ./Figures/Fit_Widget.png
    :figwidth: 100%

    Fit Widget in action


    **Features**

    1. Read and fit multiple data sets
    2. Functions are categorized under different types and experimental techniques
    3. Easy to add new categories and new functions within the categories
    4. Once the function is defined properly all the free and fitting parameters will be available within the GUI as tables.
    5. An in-built Function_Editor_ is provided with a easy to use template.
    6. A Data_Dialog_ is provided for importing and manipulating data files.


    **Usage**

    Fit_Widget_ can be used as stand-alone python fitting package by running this in terminal::

        $python Fit_Widget.py

    The widget can be used as a widget with any other python application.


.. _Data_Dialog:

Data Dialog
***********
The dialog provides an interface to import and manipulate data for the Fit_Widget_.

.. figure:: ./Figures/Data_Dialog.png
    :figwidth: 100%

    Data Dialog

    **Features**

    Data Dialog has several cool features:

    1. It can import any ascii file with tabulated data with the file extensions (**.txt**, **.dat**).
    2. It can show both the meta-data and the data present in the file provided that the data file is written in this particular format as mentioned in Data_File_Format_.
    3. After loading the file, both meta-data and the data can be added or removed or modified.
    4. New rows and columns can be added or removed for the data.
    5. Mathematical calculations can be done on the existing columns of the data which will be added as new columns. For data manipulations please follow the instructions in Data_Manipulation_.
    6. Provides 1D plots of all/some of the columns of the data. See Plotting_With_Data_Dialog_
    7. If the **☐Auto Update** is checked, any change in the data file will update the data automatically in the Data_Dialog_ along with **Plots**.
    8. Using the **☐Auto Update** feature a datafile can be visualized dynamically on change in the data within the file.

    **Usage**

    The dialog can be used as a dialog to import data in any other widgets like the Fit_Widget_. For example, within the Fit_Widget_ the Data_Dialog_ is used to manipulate the data by opening the dialog using the following function::

        from Data_Dialog import Data_Dialog

        def openDataDialog(self,item):
            fnum,fname=item.text().split('<>')
            data_dlg=Data_Dialog(data=self.dlg_data[fname],parent=self,plotIndex=self.plotColIndex[fname])
            data_dlg.dataFileLineEdit.setText(fname)
            if data_dlg.exec_():
                newFname=data_dlg.dataFileLineEdit.text()
                if fname==newFname:
                    self.plotColIndex[fname]=data_dlg.plotColIndex
                    self.dlg_data[fname]=copy.copy(data_dlg.data)
                    self.data[fname]=copy.copy(data_dlg.externalData)
                    self.plotWidget.add_data(self.data[fname]['x'],self.data[fname]['y'],yerr=self.data[fname]['yerr'],name=fnum)
                    self.update_plot()
                else:
                    item.setText('%s<>%s'%(fnum,newFname))
                    self.data[newFname]=self.data.pop(fname)
                    self.dlg_data[newFname]=self.dlg_data.pop(fname)
                    self.dlg_data[newFname]=copy.copy(data_dlg.data)
                    self.data[newFname]=copy.copy(data_dlg.externalData)
                    self.plotColIndex[newFname]=data_dlg.plotColIndex
                    self.plotWidget.add_data(self.data[newFname]['x'], self.data[newFname]['y'], yerr=self.data[newFname][
                        'yerr'],name=fnum)
                    self.update_plot()


    The dialog can also be used stand-alone to visualize, manipulate a data file with data and meta-data (see Data_File_Format_) by running this command in terminal::

            $python Data_Dialog.py [filename]

    where [filename] is an optional argument to provide a file with full path.




.. _Data_File_Format:

Data File Format
----------------
The data file must be written in the format as shown below::

    #Any text about explaining the data
    #parameter1_name=parameter1_value
    #parameter2_name=parameter2_value
    #col_names=['col1','col2','col3']
    1   1   1
    2   4   8
    3   9   27

The first few lines with '#' can be used for stating the details of the file. Any meta-data needs to be saved should
follow the syntax as shown above as '#parameter1_name=parameter1_value'. When the above file is saved as **data_file.txt** and opened in Data_Dialog_, the data looks like this:

.. figure:: ./Figures/Data_Dialog_w_Data_File.png
    :figwidth: 100%

    Data Dialog in action



.. _Data_Manipulation:

Data Manipulation
-----------------
In the Data_Dialog_ both the meta-data and data can be added/removed and edited with the following conditions:

1. If a file is imported with **col_names** as one of the meta-data, you can edit the values of the **col_names** but cannot remove it.
2. If the columns are already set for plotting in the **Plot Setup** tab you cannot remove the last two tabs.
3. When the Data_Dialog_ is not used within any other widgets, all the data columns can be removed.
4. When the Data_Dialog_ is used within any other widgets, one can delete all the columns except the remaining two.

Add New Data Column
+++++++++++++++++++
You can add new columns by clicking **Add Column** which will open up a Data_Column_Dialog_i_. Then the column values can be either:

1. An expression of **i** which can take integer values from a minimum value (default=0) to a maximum value (default=100). The expression can be any numpy expression like::

    i**2
    np.sin(i)+np.cos(i)
    np.exp(i*2)

 Here **np** is the imported **numpy** module. Please see Data_Column_Dialog_i_.

2. A numpy expression involving the data columns (col_A and col_B in this case) like::

    col.col_A+col.col_B
    np.sin(col.col_A)+np.cos(col.col_B)
    np.exp(col.col_A)

 Here a particular column is used as **col.Column_Name**. Please see Data_Column_Dialog_Columns_.

.. _Data_Column_Dialog_i:

.. figure:: ./Figures/Data_Column_Dialog_with_i.png
    :figwidth: 100%

    Data Column Dialog with numpy expression involving i

.. _Data_Column_Dialog_Columns:

.. figure:: ./Figures/Data_Column_Dialog_with_columns.png
    :figwidth: 100%

    Data Column Dialog with numpy expression involving columns

Remove Data Columns
+++++++++++++++++++
The columns can be removed by:

1. Selecting the entire column either by:

   * Selecting the first row of the column and select the last row with **SHIFT** button pressed.
   * Clicking the **Left-Button** of the mouse over the first row of the column and keeping the **Left-Button** pressed drag all the way to the last column.

2. Click the **Remove Column** button.

Add New Data Rows
+++++++++++++++++
A new row can be added by selecting a row where you want to add a row and click **Add Row**

Remove Data Rows
++++++++++++++++
Multiple rows can be removed by selecting multiple rows and click **Remove Rows**


.. _Plotting_With_Data_Dialog:

Plotting with Data Dialog
-------------------------
Data_Dialog_ can also be used for visualizing (within the Data Dialog) and selecting the data (for other widgets) to create 1D plots with errorbars. In order to plot the data needs to be at least a two column data. Once a two-column data is opened, in order to to visualize/select the data for plotting one needs to do the following:

    1) Click to the **Plot Setup** tab. See Data_Dialog_Plot_Setup_.
    2) Click **Add** button which will automatically add a row in the table.
    3) By default the row will be loaded with with *Data_0* as label, first and second column of the data as *X* and *Y* column, respectively.
    4) By default the *Yerr* column is selected as *None*.
    5) Many rows can be added in this way to visualize the data in Data_Dialog_ whereas when the Data_Dialog_ is used within other widgets only one row will be added by default.
    6) The data rows can be removed from the **Plot Setup** by selecting entire row (by clicking the row numbers at the extreme left) and clicking the **Remove** button.
    7) When using the Data_Dialog_ with any other widget, you cannot add or remove plots set for plotting. Though you can change the columns to plot.
    8) All the columns of the data will be available as drop down menu in each of the cells for selecting them as *X*, *Y*, and *Yerr* columns to plot.
    9) After adding the column, go to **Plots** tab within the Data_Dialog_ to visualize the data. See Data_Dialog_Plot_tab_.
    10) Both the X- and Y-axis labels will be updated with the column names selected in the **Plot Setup**.
    11) In order to switch between the log/linear scales of both the axes check/uncheck the **☐LogX** and **☐LogY** checkboxes.
    12) Line-width and the Symbol sizes can be tweaked by changing the **Line width** and **Point size** options.
    13) By default, the errorbars are not plotted and can be plotted by checking the **☐Errorbar** checkbox, provided that a column is already selected in *Yerr* column of the **Plot Setup**.

.. _Data_Dialog_Plot_Setup:
.. figure:: ./Figures/Data_Dialog_Plot_Setup.png
    :figwidth: 100%

    Plot Setup of Data Dialog

.. _Data_Dialog_Plot_tab:
.. figure:: ./Figures/Data_Dialog_Plot_tab.png
    :figwidth: 100%

    Plot tab of Data Dialog

.. _Function_Editor:

Function Editor
***************
The editor provides an interface to write new functions to be included
in the Fit_Widget_. The is enabled with python syntax highlighting.

.. figure:: ./Figures/Function_Editor.png
    :figwidth: 100%

    Function Editor


      
