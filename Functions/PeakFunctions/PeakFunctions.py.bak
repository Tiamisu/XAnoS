import numpy as np
from lmfit import Parameters

class LogNormal:
    """
    Provides log-normal function
    """
    def __init__(self,x=0.0,mu=1.0,sig=1.0,norm=1.0,bkg=0.0):
        
        self.x=x
        self.mu=mu
        self.sig=sig
        self.norm=norm
        self.bkg=0.0
        self.choices=None
        self.output_params={}
        
    def init_params(self):
        self.params=Parameters()
        self.params.add('mu',value=self.mu,vary=0)
        self.params.add('sig',value=self.sig,vary=0)
        self.params.add('norm',value=self.norm,vary=0)
        self.params.add('bkg',value=self.norm,vary=0)
    
        
    def y(self):
        return self.norm*np.exp(-(np.log(self.x)-np.log(self.mu))**2/2.0/self.sig**2)/self.x/self.sig/2.5066+self.bkg
    
    
class Gaussian:
    """
    Provides Gaussian function
    """
    def __init__(self,x=0.0,mu=1.0,sig=1.0,norm=1.0,bkg=0.0):
        
        self.x=x
        self.mu=mu
        self.sig=sig
        self.norm=norm
        self.bkg=0.0
        self.choices=None
        self.output_params={}
        
    def init_params(self):
        self.params=Parameters()
        self.params.add('mu',value=self.mu,vary=0)
        self.params.add('sig',value=self.sig,vary=0)
        self.params.add('norm',value=self.norm,vary=0)
        self.params.add('bkg',value=self.norm,vary=0)
    
        
    def y(self):
        return self.norm*np.exp(-(self.x-self.mu)**2/2.0/self.sig**2)/self.sig/2.5066+self.bkg