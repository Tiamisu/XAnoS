import numpy as np
from lmfit import Parameters
import sys
sys.path.append('/home/epics/CARS5/Users/ChemMat/Beamline Operations/15IDD/SAXS/SAXS_Drive')
from utils import find_minmax
from .PeakFunctions import LogNormal, Gaussian

class Sphere:
    """
    This class calculates the form factor of a solid sphere with size distribution
        x          : Array of q-values in the same reciprocal unit as R and Rsig
        R          : Mean radius of the solid spheres
        Rsig       : Width of the distribution of solid spheres
        rhoc       : Electron density of the particle
        rhosol     : Electron density of the solvent or surrounding environment
        dist       : 'Gaussian' or 'LogNormal'
    """
    def __init__(self, x=0.001, R=1.0, Rsig=0.0, rhoc=1.0, rhosol=0.0, norm=1.0, bkg=0.0, dist='Gaussian'):
        """
        
        """
        if type(x)==list:
            self.x=np.array(x)
        else:
            self.x=x
        self.R=R
        self.Rsig=Rsig
        self.dist=dist
        self.rhoc=rhoc
        self.rhosol=rhosol
        self.norm=norm
        self.bkg=bkg
        self.N=100
        self.choices={'dist':['Gaussian','LogNormal']}
        self.output_params={}
        
    def init_params(self):
        self.params=Parameters()
        self.params.add('R',value=self.R,vary=0)
        self.params.add('Rsig',value=self.Rsig,vary=0)
        self.params.add('rhoc',value=self.rhoc,vary=0)
        self.params.add('rhosol',value=self.rhosol,vary=0)
        self.params.add('norm',value=self.norm,vary=0)
        self.params.add('bkg',value=self.bkg,vary=0)
        
    def y(self):
        rho=self.rhoc-self.rhosol
        if self.Rsig<1e-3:
            return self.norm*rho**2*(np.sin(self.x*self.R)-self.x*self.R*np.cos(self.x*self.R))**2/self.x**6+self.bkg
        else:
            if self.dist=='Gaussian':
                gau=Gaussian(x=0.001,mu=self.R,sig=self.Rsig)
                rmin,rmax=find_minmax(gau,self.R,self.Rsig)
                r=np.linspace(rmin,rmax,self.N)
                gau.x=r
                dist=gau.y()
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':r,'y':dist/sumdist}
                if type(self.x)==np.ndarray:
                    ffactor=[]
                    for x in self.x:
                        f=np.sum((np.sin(x*r)-x*r*np.cos(x*r))**2*dist/x**6)
                        ffactor.append(f/sumdist)
                    return self.norm*rho**2*np.array(ffactor)+self.bkg
                else:
                    return self.norm*rho**2*np.sum((np.sin(self.x*r)-self.x*r*np.cos(self.x*r))**2*dist/self.x**6)/sumdist+self.bkg
            elif self.dist=='LogNormal':
                lgn=LogNormal(x=0.001,mu=self.R,sig=self.Rsig)
                rmin,rmax=find_minmax(lgn,self.R,self.Rsig)
                r=np.linspace(rmin,rmax,self.N)
                lgn.x=r
                dist=lgn.y()
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':r,'y':dist/sumdist}
                if type(self.x)==np.ndarray:
                    ffactor=[]
                    for x in self.x:
                        f=np.sum((np.sin(x*r)-x*r*np.cos(x*r))**2*dist/x**6)
                        ffactor.append(f/sumdist)
                    return self.norm*rho**2*np.array(ffactor)+self.bkg
                else:
                    return self.norm*rho**2*np.sum((np.sin(self.x*r)-self.x*r*np.cos(self.x*r))**2*dist/self.x**6)/sumdist+self.bkg
            else:
                return np.ones_like(x)
            
class CoreShellSphere:
    """
    This class calculates the form factor of a spherical core-shell structure with size and shell thickness distribution
        x          : signle or Array of q-values in the reciprocal unit as R and Rsig
        R          : Mean radius of the solid spheres
        Rsig       : Width of the distribution of solid spheres
        rhoc        : Electron density of the core
        sh         : Shell thicknes
        shsig      : Width of distribution of shell thicknesses
        rhosh      : Electron density of the shell
        rhosol     : Electrib density of the surrounding solvent/media
        dist       : 'Gaussian' or 'LogNormal'
    """
    def __init__(self, x=0.001, R=1.0, Rsig=0.0, rhoc=1.0, sh=1.0, shsig=0.0, rhosh=0.5, rhosol=0.0, norm=1.0, bkg=0.0, dist='Gaussian'):
        """
        
        """
        if type(x)==list:
            self.x=np.array(x)
        else:
            self.x=x
        self.R=R
        self.Rsig=Rsig
        self.rhoc=rhoc
        self.sh=sh
        self.shsig=shsig
        self.rhosh=rhosh
        self.rhosol=rhosol
        self.dist=dist
        self.norm=norm
        self.bkg=bkg
        self.N=100
        self.choices={'dist':['Gaussian','LogNormal']}
        self.output_params={}
        
    def init_params(self):
        self.params=Parameters()
        self.params.add('R',value=self.R,vary=0)
        self.params.add('Rsig',value=self.Rsig,vary=0)
        self.params.add('rhoc',value=self.rhoc,vary=0)
        self.params.add('sh',value=self.sh,vary=0)
        self.params.add('shsig',value=self.shsig,vary=0)
        self.params.add('rhosh',value=self.rhosh,vary=0)
        self.params.add('rhosol',value=self.rhosol,vary=0)
        self.params.add('norm',value=self.norm,vary=0)
        self.params.add('bkg',value=self.bkg,vary=0)
        
    def coreshell(self,x,R,rhoc,sh,rhosh,rhosol):
        """
        Computes the form factor a monodisperse core-shell structure
        """
        Rsh=R+sh
        amp=((rhoc-rhosh)*(np.sin(x*R)-x*R*np.cos(x*R))+(rhosh-rhosol)*(np.sin(x*Rsh)-x*Rsh*np.cos(x*Rsh)))/x**3
        return amp, amp**2   
    
        
    def y(self):
        if self.Rsig<1e-3 and self.shsig<1e-3:
            amp,res= self.coreshell(self.x,self.R,self.rhoc,self.sh,self.rhosh,self.rhosol)
            self.rdist=None
            self.sdist=None
            return self.norm*res+self.bkg
        elif self.Rsig>1e-3 and self.shsig<1e-3:
            if self.dist=='Gaussian':
                gau=Gaussian(x=0.001,mu=self.R,sig=self.Rsig)
                rmin,rmax=find_minmax(gau,self.R,self.Rsig)
                r=np.linspace(rmin,rmax,self.N)
                gau.x=r
                dist=gau.y()
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':r,'y':dist/sumdist}
                if type(self.x)==np.ndarray:
                    ffactor=[]
                    for x in self.x:
                        amp,res=self.coreshell(x,r,self.rhoc,self.sh,self.rhosh,self.rhosol)
                        f=np.sum(res*dist)
                        ffactor.append(f/sumdist)
                    return self.norm*np.array(ffactor)+self.bkg
                else:
                    amp,res=self.coreShell(self.x,r,self.rhoc,self.sh,self.rhosh,self.rhosol)
                    return self.norm*np.sum(res*dist)/sumdist+self.bkg
            elif self.dist=='LogNormal':
                lgn=LogNormal(x=0.001,mu=self.R,sig=self.Rsig)
                rmin,rmax=find_minmax(lgn,self.R,self.Rsig)
                r=np.linspace(rmin,rmax,self.N)
                lgn.x=r
                dist=lgn.y()
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':r,'y':dist/sumdist}
                if type(self.x)==np.ndarray:
                    ffactor=[]
                    for x in self.x:
                        amp,res=self.coreshell(x,r,self.rhoc,self.sh,self.rhosh,self.rhosol)
                        f=np.sum(res*dist)
                        ffactor.append(f/sumdist)
                    return self.norm*np.array(ffactor)+self.bkg
                else:
                   amp,res=self.coreshell(self.x,r,self.rhoc,self.sh,self.rhosh,self.rhosol)
                   return self.norm*np.sum(res*dist)/sumdist+self.bkg
            else:
                #amp,res=self.coreshell(self.x,self.R,self.rhoc,self.sh,self.rhosh)
                return np.ones_like(self.x)
        elif self.Rsig<1e-3 and self.shsig>1e-3:
            if self.dist=='Gaussian':
                gau=Gaussian(x=0.001,mu=self.sh,sig=self.shsig)
                shmin,shmax=find_minmax(gau,self.sh,self.shsig)
                sh=np.linspace(shmin,shmax,self.N)
                gau.x=sh
                dist=gau.y()
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':sh,'y':dist/sumdist}
                if type(self.x)==np.ndarray:
                    ffactor=[]
                    for x in self.x:
                        amp,res=self.coreshell(x,self.R,self.rhoc,sh,self.rhosh,self.rhosol)
                        f=np.sum(res*dist)
                        ffactor.append(f/sumdist)
                    return self.norm*np.array(ffactor)+self.bkg
                else:
                    amp,res=self.coreShell(self.x,self.R,self.rhoc,sh,self.rhosh,self.rhosol)
                    return self.norm*np.sum(res*dist)/sumdist+self.bkg
            elif self.dist=='LogNormal':
                lgn=LogNormal(x=0.001,mu=self.sh,sig=self.shsig)
                shmin,shmax=find_minmax(lgn,self.sh,self.shsig)
                sh=np.linspace(shmin,shmax,self.N)
                lgn.x=sh
                dist=lgn.y()
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':sh,'y':dist/sumdist}
                if type(self.x)==np.ndarray:
                    ffactor=[]
                    for x in self.x:
                        amp,res=self.coreshell(x,self.R,self.rhoc,sh,self.rhosh,self.rhosol)
                        f=np.sum(res*dist)
                        ffactor.append(f/sumdist)
                    return self.norm*np.array(ffactor)+self.bkg
                else:
                   amp,res=self.coreshell(self.x,self.R,self.rhoc,sh,self.rhosh,self.rhosol)
                   return self.norm*np.sum(res*dist)/sumdist+self.bkg
            else:
                #amp,res=self.coreshell(self.x,self.R,self.rhoc,self.sh,self.rhosh)
                return np.ones_like(self.x)
        else:
            if self.dist=='Gaussian':
                gau=Gaussian(x=0.001,mu=self.R,sig=self.Rsig)
                rmin,rmax=find_minmax(gau,self.R,self.Rsig)
                r=np.linspace(rmin,rmax,self.N)
                shmin,shmax=find_minmax(gau,self.sh,self.shsig)
                sh=np.linspace(shmin,shmax,self.N)                
                R,Sh=np.meshgrid(r,sh)
                dist=np.exp(-(R-self.R)**2/2.0/self.Rsig**2)*np.exp(-(Sh-self.sh)**2/2.0/self.shsig**2)
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':R,'y':Sh,'z':dist/sumdist}
                if type(self.x)==np.ndarray:
                    ffactor=[]
                    for x in self.x:
                        amp,res=self.coreshell(x,R,self.rhoc,Sh,self.rhosh,self.rhosol)
                        f=np.sum(res*dist)
                        ffactor.append(f/sumdist)
                    return self.norm*np.array(ffactor)+self.bkg
                else:
                    amp,res=self.coreShell(self.x,R,self.rhoc,Sh,self.rhosh,self.rhosol)
                    return self.norm*np.sum(res*dist)/sumdist+self.bkg
            elif self.dist=='LogNormal':
                lgn=LogNormal(x=0.001,mu=self.R,sig=self.Rsig)
                rmin,rmax=find_minmax(lgn,self.R,self.Rsig)
                r=np.linspace(rmin,rmax,self.N)
                shmin,shmax=find_minmax(lgn,self.sh,self.shsig)
                sh=np.linspace(shmin,shmax,self.N)                 
                R,Sh=np.meshgrid(r,sh)
                dist=np.exp(-(np.log(R)-np.log(self.R))**2/2.0/self.Rsig**2)*np.exp(-(np.log(Sh)-np.log(self.sh))**2/2.0/self.shsig**2)/R/Sh
                sumdist=np.sum(dist)
                self.rdist,self.shdist=R,Sh
                self.srshdist=dist/sumdist
                if type(self.x)==np.ndarray:
                    ffactor=[]
                    for x in self.x:
                        amp,res=self.coreshell(x,R,self.rhoc,Sh,self.rhosh,self.rhosol)
                        f=np.sum(res*dist)
                        ffactor.append(f/sumdist)
                    return self.norm*np.array(ffactor)+self.bkg
                else:
                    amp,res=self.coreShell(self.x,R,self.rhoc,Sh,self.rhosh,self.rhosol)
                    return self.norm*np.sum(res*dist)/sumdist+self.bkg
            else:
                #amp,res=self.coreshell(self.x,self.R,self.rhoc,self.sh,self.rhosh)
                return np.ones_like(self.x)
            
            
class ContinousSphere:
    """
    This class calculates the form factor of a sphere with continous electron density gradient along the radial direction
        x          : single or array of q-values in the reciprocal unit as R
        R          : An array of radial locations
        rho        : Electron density at the locations R
        Rsig       : Width of the distribution of all the radial locations
        dist       : 'Gaussian' or 'LogNormal'
        norm       : Normalization constant
        bkg        : Constant Bkg
    """
    def __init__(self,x=0.001,R=[10.0,11.0],rho=[1.0,0.0],Rsig=0.0,dist='Gaussian',norm=1.0,bkg=0.0):
        """
        
        
        """
        if type(x)==list:
            self.x=np.array(x)
        else:
            self.x=x
        self.R=R
        self.rho=rho
        self.Rsig=Rsig
        self.norm=norm
        self.dist=dist
        self.bkg=bkg
        self.N=100
        self.choices={'dist':['Gaussian','LogNormal']}
        self.output_params={}
        
    def init_params(self):
        self.params=Parameters()
        self.params.add('Rsig',value=self.Rsig,vary=0)
        self.params.add('norm',value=self.norm,vary=0)
        self.params.add('bkg',value=self.bkg,vary=0)
        
    def csphere(self,r,rho):
        r=np.array(r)
        drho=np.diff(rho)
        res=[]
        for x in self.x:
            res.append(np.sum(drho*(np.sin(x*r[1:])-x*r[1:]*np.cos(x*r[1:]))/x**3))
        return np.array(res)**2
        
    def y(self):
        if self.Rsig<0.001:
            return self.norm*self.csphere(self.R,self.rho)+self.bkg
        else:
            if self.dist=='Gaussian':
                gau=Gaussian(x=0.0,mu=self.R[0],sig=self.Rsig)
                rmin,rmax=find_minmax(gau,mu=self.R[0],sig=self.Rsig)
                dr=np.linspace(rmin,rmax,self.N)
                gau.x=dr
                dist=gau.y()
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':dr,'y':dist/sumdist}
                res=np.zeros_like(self.x)
                for i in range(len(dr)):
                    r=self.R+dr[i]-self.R[0]
                    res=res+dist[i]*self.csphere(r,self.rho)
                return self.norm*res/sumdist+self.bkg
                
            elif self.dist=='LogNormal':
                lgn=LogNormal(x=0.0,mu=self.R[0],sig=self.Rsig)
                rmin,rmax=find_minmax(lgn,mu=self.R[0],sig=self.Rsig)
                dr=np.linspace(rmin,rmax,self.N)
                lgn.x=dr
                dist=lgn.y()
                sumdist=np.sum(dist)
                self.output_params['Distribution']={'x':dr,'y':dist/sumdist}
                res=np.zeros_like(self.x)
                for i in range(len(dr)):
                    r=self.R+dr[i]-self.R[0]
                    res=res+dist[i]*self.csphere(r,self.rho)
                return self.norm*res/sumdist+self.bkg
            else:
                return None

            
class Ellipsoid:
    """
    This class calculates the form factor of an ellipsoid
        Intialize the parameters for the form factor calculation of an ellipsoid
        x          : sigle or Array of q-values in the reciprocal unit as R1 and R2
        R1 &R2     : Semi-major and semi-minor axis of the ellipsoid
        rhoc       : Electron density of the ellipsoid
        rhosol     : Electron density of the surrounding media/solvent
        norm       : Normalization constant
        bkg        : Constant Bkg
    """
    def __init__(self, x=0.001,R1=1.0,R2=1.0,rhoc=1.0,rhosol=0.0,norm=1.0,bkg=0.0):
        """
        
        """
        if type(x)==list:
            self.x=np.array(x)
        else:
            self.x=x
        self.R1=R1
        self.R2=R2
        self.rhoc=rhoc
        self.rhosol=rhosol
        self.norm=norm
        self.bkg=bkg
        self.N=101
        self.choices=None
        self.output_params={}
        
    def init_params(self):
        self.params=Parameters()
        self.params.add('R1',value=self.R1,vary=0)
        self.params.add('R2',value=self.R2,vary=0)
        self.params.add('rhoc',value=self.rhoc,vary=0)
        self.params.add('rhosol',value=self.rhosol,vary=0)
        self.params.add('norm',value=self.norm,vary=0)
        self.params.add('bkg',value=self.bkg,vary=0)
        
        
    def y(self):
        """
        Computes the form factor of an ellipsoid
        """
        r=lambda a: np.sqrt((self.R1*np.sin(a))**2+(self.R2*np.cos(a))**2)
        ang=np.linspace(0,np.pi/2.0,91)
        if type(self.x)==np.ndarray:
            ffactor=[]
            for x in self.x:
                f=lambda a: (np.sin(x*r(a))-x*r(a)*np.cos(x*r(a)))**2/(x*r(a))**6*np.sin(a)
                ffactor.append(np.sum(f(ang)))
            return self.norm*9*(self.rhoc-self.rhosol)**2*np.array(ffactor)+self.bkg
        else:
            f=lambda a: (np.sin(self.x*r(a))-self.x*r(a)*np.cos(self.x*r(a)))**2/(self.x*r(a))**6*np.sin(a)
            ffactor=np.sum(f(ang))
            return self.norm*9*(self.rhoc-self.rhosol)**2*ffactor+self.bkg
        
        

        
        