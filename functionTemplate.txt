####Please do not remove lines below####
from lmfit import Parameters 
import numpy as np
import sys
import os
sys.path.append(os.path.abspath('.'))
sys.path.append(os.path.abspath('./Functions'))
sys.path.append(os.path.abspath('./Fortran_rountines'))
####Please do not remove lines above####

####Import your modules below if needed####



class <*>: #Please put the class name same as the function name
    def __init__(self,x=0,mpar={'type':['1']}):
        """
        Documentation
        x           : Independent variable in the form of a scalar or an array
        """
        if type(x)==list:
            self.x=np.array(x)
        else:
            self.x=x
        self.__mpar__=mpar #If there is any multivalued parameter
        self.choices={} #If there are choices available for any fixed parameters
        self.init_params()
        self.__fit__=False
        
    def init_params(self):
        """
        Define all the fitting parameters like
        self.param.add('sig',value = 0, vary = 0, min = -np.inf, max = np.inf, expr = None, brute_step = None)
        """
        self.params=Parameters()
        for key in self.__mpar__.keys():
            if key!='type':
                for i in range(len(self.__mpar__[key])):
                        self.params.add('__%s__%03d'%(key,i),value=self.__mpar__[key][i],vary=0,min=-np.inf,max=np.inf,expr=None,brute_step=None)
    
    def y(self):
        """
        Define the function in terms of x to return some value
        """
        self.output_params={}
        if not self.__fit__:
            self.output_params['scaler_parameters']={}
        return self.x
        
        
if __name__=='__main__':
    x=np.arange(0.001,1.0,0.1)
    fun=tmpxyz(x=x)
    print(fun.y())       
